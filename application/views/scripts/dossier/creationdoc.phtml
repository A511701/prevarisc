<?php

function verifInfos($var){
	if($var == ''){
		return "";
	}else{
		
		return $var;
	}
}

$odf = new Odf(REAL_DATA_PATH.DIRECTORY_SEPARATOR.$this->fichierSelect);


try {
	$odf->setVars('typeDossier',verifInfos($this->typeDossier),true,'UTF8');
} catch (OdfException $e) {

}

try {
	$odf->setVars('natureDossier',verifInfos($this->natureDossier),true,'UTF8');
} catch (OdfException $e) {

}

try {
	$odf->setVars('libelle_commission',verifInfos($this->commissionInfos['LIBELLE_COMMISSION']),true,'UTF8');
} catch (OdfException $e) {

}

try {
	$odf->setVars('date_commEntete',verifInfos($this->dateCommEntete),true,'UTF8');
} catch (OdfException $e) {

}

try {
	$odf->setVars('numWinPrev',verifInfos($this->numWinPrev),true,'UTF8');
} catch (OdfException $e) {

}

try {
	$odf->setVars('objetDossier',verifInfos($this->infosDossier['OBJET_DOSSIER']),true,'UTF8');
}catch (OdfException $e){

}

try {
	$odf->setVars('analyseRisque',verifInfos($this->infosDossier['ANOMALIE_DOSSIER']),true,'UTF8');
}catch (OdfException $e){

}

try {
	$odf->setVars('descriptifDossier',verifInfos($this->infosDossier['DESCRIPTIF_DOSSIER']),true,'UTF8');
}catch (OdfException $e){

}

try {
	if($this->infosDossier['HORSDELAI_DOSSIER'] == 0){
		$horsdelai = "Non";
	}else{
		$horsdelai = "Oui";
	}
	$odf->setVars('horsDelai',verifInfos($horsdelai),true,'UTF8');
}catch (OdfException $e){

}

try {
	$odf->setVars('docManquant',verifInfos($this->listeDocManquant['DOCMANQUANT']),true,'UTF8');
}catch (OdfException $e){

}

try {
	if($this->infosDossier['DATEVISITE_DOSSIER']){
		$date = new Zend_Date($this->infosDossier['DATEVISITE_DOSSIER'], Zend_Date::DATES);
		$date = $date->get(Zend_Date::DAY."/".Zend_Date::MONTH."/".Zend_Date::YEAR);
		$odf->setVars('dateVisite',verifInfos($date),true,'UTF8');
	}else{
		$odf->setVars('dateVisite',verifInfos(""),true,'UTF8');
	}
}catch (OdfException $e){

}

try {
	if($this->infosDossier['DATECOMM_DOSSIER']){
		$date = new Zend_Date($this->infosDossier['DATECOMM_DOSSIER'], Zend_Date::DATES);
		$date = $date->get(Zend_Date::DAY."/".Zend_Date::MONTH."/".Zend_Date::YEAR);
		$odf->setVars('dateComm',verifInfos($date),true,'UTF8');
	}else{
		$odf->setVars('dateComm',verifInfos(""),true,'UTF8');
	}
}catch (OdfException $e){

}

try {
	if($this->infosDossier['DATEINCOMPLET_DOSSIER']){
		$date = new Zend_Date($this->infosDossier['DATEINCOMPLET_DOSSIER'], Zend_Date::DATES);
		$date = $date->get(Zend_Date::DAY."/".Zend_Date::MONTH."/".Zend_Date::YEAR);
		$odf->setVars('dateIncomplet',verifInfos($date),true,'UTF8');
	}else{
		$odf->setVars('dateIncomplet',verifInfos(""),true,'UTF8');
	}
}catch (OdfException $e){

}

try {
	$odf->setVars('demandeurDossier',verifInfos($this->infosDossier['DEMANDEUR_DOSSIER']),true,'UTF8');
}catch (OdfException $e){

}

try {
	$odf->setVars('servInstructeur',verifInfos($this->servInstructeur),true,'UTF8');
}catch (OdfException $e){

}


//PARTIE PREVENTIONNISTE
	try{
		$preventionniste = $odf->setSegment('preventionnistes');
		foreach($this->preventionnistes as $prev){
			//echo $prev['NOM_UTILISATEURINFORMATIONS']." / ".$prev['NOM_UTILISATEURINFORMATIONS'];
			$preventionniste->nom(utf8_decode($prev['NOM_UTILISATEURINFORMATIONS']));
			$preventionniste->prenom(utf8_decode($prev['PRENOM_UTILISATEURINFORMATIONS']));
			$preventionniste->merge();
		}
		$odf->mergeSegment($preventionniste);
	} catch (OdfException $e) {

	}

// PARTIE DOC CONSULTE
	try{
		//Generation du segment listeDocs
		$docConsulte = $odf->setSegment('listeDocs');
		foreach($this->listeDocs as $document){
			$exist = false;	
			foreach($this->dossierDocConsutle as $docExistant){
				if($docExistant['ID_DOC'] == $document['ID_DOC']){
					$exist = true;
					$ref = $docExistant['REF_CONSULTE'];
					$date = $docExistant['DATE_CONSULTE'];
				}
			}
			$docConsulte->libelledoc(utf8_decode($document['LIBELLE_DOC']));
			if($exist){
				$docConsulte->exist('X');
				$docConsulte->refdoc(utf8_decode($ref));
				//Conversion de la date ang -> fr
				if ($date) {
					$date = new Zend_Date($date, Zend_Date::DATES);
					$date = $date->get(Zend_Date::DAY."/".Zend_Date::MONTH."/".Zend_Date::YEAR);
				}
				$docConsulte->datedoc(utf8_decode($date)."\n");
				$docConsulte->merge();
			}
			/*
			else{
				$docConsulte->exist('', true, "ISO-8859-15");
				$docConsulte->refdoc('', true, "ISO-8859-15");
				$docConsulte->datedoc('', true, "ISO-8859-15");
			}
			*/
		}
		$odf->mergeSegment($docConsulte);
	} catch (OdfException $e) {

	}
	
	try{
		//Liste des doncuments conusltés ajoutés s'il y en à
		$listeDocAjout = $this->listeDocsAjout;
		$docAjout = $odf->setSegment('listeDocsAjout');
		foreach($this->listeDocsAjout as $documentAjout){
			$docAjout->exist('X');
			$docAjout->libelledoc(utf8_decode($documentAjout['LIBELLE_DOCAJOUT']));
			$docAjout->refdoc(utf8_decode($documentAjout['REF_DOCAJOUT']));
			if ($documentAjout['DATE_DOCAJOUT']) {
				$date = new Zend_Date($documentAjout['DATE_DOCAJOUT'], Zend_Date::DATES);
				$date = $date->get(Zend_Date::DAY."/".Zend_Date::MONTH."/".Zend_Date::YEAR);
			}
			$docAjout->datedoc(utf8_decode($date));
			$docAjout->merge();
		}
		$odf->mergeSegment($docAjout);
	} catch (OdfException $e) {

	}
	
// PARTIE PRESCRIPTION
	try{
		$nbPrescDossier = count($this->prescriptionDossier);

		$prescription = $odf->setSegment('listePrescription');
		for($i=0; $i < $nbPrescDossier; $i++)
		{
			$nbAssoc = count($this->prescriptionDossier[$i]);
			$cpt = true;
			$article = '';
			$texte = '';
			for($j=0; $j < $nbAssoc; $j++)
			{
				$articleT = $this->prescriptionDossier[$i][$j]['LIBELLE_ARTICLE'];
				$texteT = $this->prescriptionDossier[$i][$j]['LIBELLE_TEXTE'];
				
				if($texteT != ''){
					$texte .= $texteT."\n";
				}else{
					$texte .= "\n";
				}
				
				if($articleT != ''){
					$article .= $articleT."\n";
				}else{
					$article .= "\n";
				}

				if($cpt)
				{
					$prescription->num(utf8_decode($this->prescriptionDossier[$i][0]['NUM_PRESCRIPTION_DOSSIER']));
					if( $this->prescriptionDossier[$i][0]['LIBELLE_PRESCRIPTION_DOSSIER'] == '')
					{
						$prescription->libelle(utf8_decode($this->prescriptionDossier[$i][0]['PRESCRIPTIONTYPE_LIBELLE']));
					}else{
						$prescription->libelle(utf8_decode($this->prescriptionDossier[$i][0]['LIBELLE_PRESCRIPTION_DOSSIER']));
					}
					$cpt = false;
				}
			}
			$prescription->texte(utf8_decode($texte));
			$prescription->article(utf8_decode($article));
			$prescription->merge();
		}
		$odf->mergeSegment($prescription);	
	} catch (OdfException $e) {

	}
	
	//PARTIE TEXTE APPLICABLE
	try{
		$texteAppl = $odf->setSegment('texteAppl');
		foreach($this->listeTextesAppl as $texteappl){
			$texteappl = str_replace("’","'",$texteappl['LIBELLE_TEXTESAPPL']);
			$texteAppl->libelleTexteAppl(utf8_decode($texteappl),true,'UTF8');
			$texteAppl->merge();
		}
		$odf->mergeSegment($texteAppl);	
	} catch (OdfException $e) {

	}

//GESTION DATES
	try{
		$odf->setVars('dateDepotMairie',verifInfos($this->DATEMAIRIE),true,'UTF8');
	} catch (OdfException $e) {

	}
	
	try{
		$odf->setVars('dateDepotSec',verifInfos($this->DATESECRETARIAT),true,'UTF8');
	} catch (OdfException $e) {

	}
	
	try{
		$odf->setVars('dateSDIS',verifInfos($this->DATESDIS),true,'UTF8');
	} catch (OdfException $e) {

	}
	
	try{
		$odf->setVars('dateCreationDossier',verifInfos($this->DATEINSERTDOSSIER),true,'UTF8');
	} catch (OdfException $e) {

	}
	
//INFORMATIONS CONCERNANT L'ETABLISSEMENT
try{
	$odf->setVars('etablissementLibelle',verifInfos($this->etablissementLibelle),true,'UTF8');
} catch (OdfException $e) {

}

try{
	$odf->setVars('typeLettreP',verifInfos($this->typeLettreP),true,'UTF8');
} catch (OdfException $e) {

}

try{
	$odf->setVars('activiteP',verifInfos($this->libelleActiviteP),true,'UTF8');
} catch (OdfException $e) {

}

try{
	$odf->setVars('typeLettreS',verifInfos($this->typeSecondaire),true,'UTF8');
} catch (OdfException $e) {

}

try{
	$odf->setVars('activiteS',verifInfos($this->activiteSecondaire),true,'UTF8');
} catch (OdfException $e) {

}

try{
	$odf->setVars('communeEtab',verifInfos($this->communeEtab),true,'UTF8');
} catch (OdfException $e) {

}

try{
	$odf->setVars('etablissementAdresse',verifInfos($this->etablissementAdresse),true,'UTF8');
} catch (OdfException $e) {

}

try{
	$odf->setVars('numDocUrba',verifInfos($this->listeDocUrba),true,'UTF8');
} catch (OdfException $e) {

}

try{
	$odf->setVars('categorieEtab',verifInfos($this->categorieEtab),true,'UTF8');	
} catch (OdfException $e) {

}

try{
	$odf->setVars('numPublic',verifInfos($this->numPublic),true,'UTF8');	
} catch (OdfException $e) {

}

try{
	$odf->setVars('numPersonnel',verifInfos($this->numPersonnel),true,'UTF8');		
} catch (OdfException $e) {

}

try{	
	$odf->setVars('avisDossier',verifInfos($this->avisDossier),true,'UTF8');
} catch (OdfException $e) {

}

try{
	$odf->setVars('etatDossier',verifInfos($this->etatDossier),true,'UTF8');
} catch (OdfException $e){

}

try{
	$odf->setVars('idDossier',verifInfos($this->idDossier),true,'UTF8');
} catch (OdfException $e){

}

try{
	$odf->setVars('numTelEtab',verifInfos($this->numTelEtab),true,'UTF8');
} catch (OdfException $e){

}

try{
	$odf->setVars('numFaxEtab',verifInfos($this->numFaxEtab),true,'UTF8');
} catch (OdfException $e){

}

//Informations du DUS du dossier
try{
	$odf->setVars('nomDus',verifInfos($this->dusDossier['NOM_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('prenomDus',verifInfos($this->dusDossier['PRENOM_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('mailDus',verifInfos($this->dusDossier['MAIL_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('telFixeDus',verifInfos($this->dusDossier['TELFIXE_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('telPortDus',verifInfos($this->dusDossier['TELPORTABLE_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('societeDus',verifInfos($this->dusDossier['SOCIETE_UTILISATEURINFORMATIONS']),true,'UTF8');	
} catch (OdfException $e){

}

//Informations de l'exploitant du dossier
try{
	$odf->setVars('nomExploitant',verifInfos($this->exploitantDossier['NOM_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('prenomExploitant',verifInfos($this->exploitantDossier['PRENOM_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('mailExploitant',verifInfos($this->exploitantDossier['MAIL_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('telFixeExploitant',verifInfos($this->exploitantDossier['TELFIXE_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('telPortExploitant',verifInfos($this->exploitantDossier['TELPORTABLE_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('societeExploitant',verifInfos($this->exploitantDossier['SOCIETE_UTILISATEURINFORMATIONS']),true,'UTF8');	
} catch (OdfException $e){

}

//Informations du responsable sécurité du dossier
try{
	$odf->setVars('nomRespSecu',verifInfos($this->respsecuDossier['NOM_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('prenomRespSecu',verifInfos($this->respsecuDossier['PRENOM_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('mailRespSecu',verifInfos($this->respsecuDossier['MAIL_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('telFixeRespSecu',verifInfos($this->respsecuDossier['TELFIXE_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('telPortRespSecu',verifInfos($this->respsecuDossier['TELPORTABLE_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('societeRespSecu',verifInfos($this->respsecuDossier['SOCIETE_UTILISATEURINFORMATIONS']),true,'UTF8');	
} catch (OdfException $e){

}

//Informations du proprietaire de l'établissement
try{
	$odf->setVars('nomProprio',verifInfos($this->proprioInfos['NOM_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('prenomProprio',verifInfos($this->proprioInfos['PRENOM_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('mailProprio',verifInfos($this->proprioInfos['MAIL_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('telFixeProprio',verifInfos($this->proprioInfos['TELFIXE_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('telPortProprio',verifInfos($this->proprioInfos['TELPORTABLE_UTILISATEURINFORMATIONS']),true,'UTF8');
	$odf->setVars('societeProprio',verifInfos($this->proprioInfos['SOCIETE_UTILISATEURINFORMATIONS']),true,'UTF8');	
} catch (OdfException $e){

}

//Surface totale entité
try{
	$odf->setVars('surfaceTotale',verifInfos($this->entite['SURFACETOTALE_ETABLISSEMENTINFORMATIONS']),true,'UTF8');
} catch (OdfException $e){

}
//Surface accessible entité
try{
	$odf->setVars('surfaceAccessible',verifInfos($this->entite['SURFACEACCPUBLIC_ETABLISSEMENTINFORMATIONS']),true,'UTF8');
} catch (OdfException $e){

}
//Extinction automatique eau entité
try{
	$valExtinction = $this->entite['EXTINCTIONAUTO_ETABLISSEMENTINFORMATIONS'];
	if($valExtinction == null || $valExtinction == 0)
		$valExtinction = "non";
	else
		$valExtinction = "oui";
	$odf->setVars('extinctionAuto',verifInfos($valExtinction),true,'UTF8');
} catch (OdfException $e){

}



//INFORMATION CONCERNANT LE PERE DE L'ENTITE
try{
	$odf->setVars('etablissementLibelleP',verifInfos($this->infoPere['LIBELLE_ETABLISSEMENTINFORMATIONS']),true,'UTF8');
}catch (OdfException $e){

}

try{
	$odf->setVars('typeLettrePPere',verifInfos($this->typeLettrePPere),true,'UTF8');
} catch (OdfException $e) {

}

try{
	$odf->setVars('activitePPere',verifInfos($this->libelleActivitePPere),true,'UTF8');
} catch (OdfException $e) {

}

try{
	$odf->setVars('categorieEtabPere',verifInfos($this->categorieEtabPere),true,'UTF8');	
} catch (OdfException $e) {

}

try{
	$valExtinctionP = $this->infoPere['EXTINCTIONAUTO_ETABLISSEMENTINFORMATIONS'];
	if($valExtinctionP == null || $valExtinctionP == 0)
		$valExtinctionP = "non";
	else
		$valExtinctionP = "oui";
	$odf->setVars('extinctionAutoP',verifInfos($valExtinctionP),true,'UTF8');
} catch (OdfException $e){

}

//INFORMATION DU GN
if($this->GN == 2){
	try{
		$odf->setVars('gn2',verifInfos('×'),true,'UTF8');
	}catch (OdfException $e){

	}
	try{
		$odf->setVars('gn3','',true,'UTF8');
	}catch (OdfException $e){

	}
}else if($this->GN == 3){
	try{
		$odf->setVars('gn2','',true,'UTF8');
	}catch (OdfException $e){

	}
	try{
		$odf->setVars('gn3',verifInfos('×'),true,'UTF8');
	}catch (OdfException $e){

	}
}


//echo $this->idPieceJointe;
try{
	$chemin = REAL_DATA_PATH.DIRECTORY_SEPARATOR."uploads".DIRECTORY_SEPARATOR."pieces-jointes".DIRECTORY_SEPARATOR.$this->idPieceJointe.".odt";
	$odf->saveToDisk($chemin);
} catch (OdfException $e) {

}

//$content_dir = REAL_DATA_PATH.DIRECTORY_SEPARATOR."uploads".DIRECTORY_SEPARATOR."pieces-jointes".DIRECTORY_SEPARATOR.$this->idRapportPj.'/';

//echo REAL_DATA_PATH.DIRECTORY_SEPARATOR."uploads".DIRECTORY_SEPARATOR."pieces-jointes".DIRECTORY_SEPARATOR.$this->idPieceJointe.".odt";
//echo REAL_DATA_PATH.DIRECTORY_SEPARATOR."uploads".DIRECTORY_SEPARATOR."pieces-jointes".DIRECTORY_SEPARATOR.$this->idRapportPj.'/';
?>