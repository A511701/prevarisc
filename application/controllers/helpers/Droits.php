<?php	class Application_Controller_Helper_Droits extends Zend_Controller_Action_Helper_Abstract {			private $model_user;		private $_get;			public function init() {						$this->model_user = new Model_DbTable_Utilisateur;			$this->_get = null;		}				public function direct() {						return $this;		}				public function get() {					if($this->model_user == null) 				$this->model_user = new Model_DbTable_Utilisateur;					if($this->_get == null)				return $this->_get = Zend_Auth::getInstance()->getIdentity() ? $this->model_user->getDroits(Zend_Auth::getInstance()->getIdentity()->ID_UTILISATEUR) : array();			else				return $this->_get;		}				public function redirect() {					$redirector = Zend_Controller_Action_HelperBroker::getStaticHelper('Redirector');			$redirector->direct('not-allowed', 'error');		}				public function checkEtablissement($id_etablissement) {			// Modèles			$model_utilisateur = new Model_DbTable_Utilisateur;			$model_adresse = new Model_DbTable_EtablissementAdresse;			$model_etablissement = new Model_DbTable_Etablissement;						// Récupération des infos pour les droits			$user = $model_utilisateur->find(Zend_Auth::getInstance()->getIdentity()->ID_UTILISATEUR)->current();			$array_commissionsUser = $model_utilisateur->getCommissionsArray(Zend_Auth::getInstance()->getIdentity()->ID_UTILISATEUR);			$adresses = $model_adresse->get($id_etablissement);			$droits = $this->get();			$liste_champs = $model_etablissement->getListeChamps();			$informations = $model_etablissement->getInformations( $id_etablissement );			$genre = $model_etablissement->getGenre($id_etablissement);			// Est ce que l'utilisateur peut acceder à cet établissement ?			$nondroit_genre = (!isset($droits->ID_GENRE[$informations["ID_GENRE"]]) ? true : $droits->ID_GENRE[$informations["ID_GENRE"]]["DROITLECTURE_GROUPEGENRE"] != 1);			$nondroit_commission = in_array("commission", $liste_champs[$genre["LIBELLE_GENRE"]]) ? ($droits->DROITCOMMISSION_GROUPE == 0 ? false : ( !in_array($informations["ID_COMMISSION"], $array_commissionsUser) ) ) : false;			$nondroit_geo = $droits->DROITGEOGRAPHIE_GROUPE == 0 || $informations["ID_GENRE"] == 1  ? false : ( count($adresses) == 0 ? true : ($droits->DROITGEOGRAPHIE_GROUPE == 1 && $adresses[0]["NUMINSEE_COMMUNE"] != $user->NUMINSEE_COMMUNE) || ($droits->DROITGEOGRAPHIE_GROUPE == 2 && !in_array($adresses[0]["NUMINSEE_COMMUNE"], $model_utilisateur->getVillesDeSesGroupements(Zend_Auth::getInstance()->getIdentity()->ID_UTILISATEUR))));			$nondroit_type =  in_array("type_principal", $liste_champs[$genre["LIBELLE_GENRE"]]) && !in_array($informations["ID_TYPE"], $droits->ID_TYPE);			$nondroit_acces = $this->getRequest()->getControllerName() == "etablissement" && (($droits->DROITETABLISSEMENT_GROUPE == 1 || $droits->DROITETABLISSEMENT_GROUPE == 2) && !in_array($this->getRequest()->getActionName(), array("index", "save", "carte", "historique", "dossiers")));			$nondroit_sauvegarde =  $this->getRequest()->getActionName() == "save" && $droits->ID_GENRE[$informations["ID_GENRE"]]["DROITECRITURE_GROUPEGENRE"] == 0;			if($nondroit_genre || $nondroit_commission || $nondroit_acces || $nondroit_sauvegarde || $nondroit_type || $nondroit_geo)				return true;			else				return false;		}				public function checkDossier($id_dossier) {					// Modèles			$model_dossier = new Model_DbTable_Dossier;						// Droits			$droits = $this->get();						// On recupère la liste des établissements du dossier			$rowset_dossiers = $model_dossier->getEtablissementDossier($id_dossier);						// Si pour un établissement, on est pas habilité, on retourne une erreur			foreach($rowset_dossiers as $row_dossier) {				if($this->checkEtablissement($row_dossier["ID_ETABLISSEMENT"]))					return true;			}			// On check si sa nature est okay			foreach($model_dossier->getNatureDossier($id_dossier) as $nature) {				if(!in_array($nature["ID_NATURE"], $droits->ID_DOSSIERNATURE))					return true;			}						return false;		}			}